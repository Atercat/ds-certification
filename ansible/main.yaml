---
- name: Filling in inventory
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Add the build host
      ansible.builtin.add_host:
        hostname: "{{ BUILDER_IP }}"
        groups: builder
        ansible_user: ubuntu

    - name: Add the run host
      ansible.builtin.add_host:
        hostname: "{{ RUNNER_IP }}"
        groups: runner
        ansible_user: ubuntu


- name: Preparing the nodes
  hosts:
    - builder
    - runner
  become: true
  gather_facts: false
  tasks:
    - name: Waiting for the instance is reachable
      ansible.builtin.wait_for_connection:

    - name: Gathering facts for the first time
      ansible.builtin.setup:

    - name: Ensure Docker is installed
      ansible.builtin.apt:
        name:
          - docker.io
          - python3-docker
          - git
        state: present
        update_cache: true

    - name: Ensure Docker service is running
      ansible.builtin.service:
        name: docker
        state: started

    - name: Login to the repository
      community.docker.docker_login:
        registry: "{{ DOCKER_REGISTRY }}"
        username: "{{ DOCKER_USER }}"
        password: "{{ DOCKER_PASSWORD }}"


- name: Building the App
  hosts: builder
  become: true
  vars:
    repo: https://github.com/boxfuse/boxfuse-sample-java-war-hello.git
    repo_path: /var/repo
    app: hello-1.0 # todo: extract the name from pom.xml
    war_path: "{{ repo_path }}/target/{{ app }}.war"
  tasks:
    - name: Clone the Git repo
      ansible.builtin.git:
        repo: "{{ repo }}"
        dest: "{{ repo_path }}"
        force: true

    - name: Start a Maven container and build an artifact
      community.docker.docker_container:
        name: builder
        image: "{{ MAVEN_IMAGE }}"
        volumes: "{{ repo_path }}:/git"
        command: mvn -f /git/pom.xml clean package
        restart: true
        detach: false

    - name: Ensure the newly built artifact is present
      ansible.builtin.file:
        path: "{{ war_path }}"

    - name: Copy the Dockerfile to the Build-node
      ansible.builtin.copy:
        src: ../files/Dockerfile.runner
        dest: "{{ repo_path }}/Dockerfile"

    - name: Build a production image and push it to the repository
      community.docker.docker_image:
        name: "{{ APP_IMAGE }}"
        source: build
        build:
          path: "{{ repo_path }}"
          args:
            artifact: "target/{{ app }}.war"
            image_name: "{{ TOMCAT_IMAGE }}"
        push: true


- name: Deploying the app
  hosts: runner
  become: true
  tasks:
    - name: Remove the old container
      community.docker.docker_container:
        name: runner
        state: absent

    - name: Remove the old image
      community.docker.docker_image:
        name: "{{ APP_IMAGE }}"
        state: absent

    - name: Run app container at production server
      community.docker.docker_container:
        name: runner
        image: "{{ APP_IMAGE }}"
        ports: "80:8080"
        recreate: true